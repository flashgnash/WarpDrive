import net.minecraftforge.gradle.common.task.SignJar


buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
//            url = "https://maven.minecraftforge.net"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            // Mixin
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.1.2"
        classpath "com.wynprice.cursemaven:CurseMaven:1.2.3"
    }
}
apply plugin: "net.minecraftforge.gradle"
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: "eclipse"
apply plugin: "maven-publish"
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: "com.wynprice.cursemaven"

// define the properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    ext.config = new ConfigSlurper().parse prop
}

group = "cr0s.warpdrive" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
def versionParts = "${config.mod_version}".split(/\./).collect { it.toInteger() }
if (System.getenv().BUILD_NUMBER != null) {// override build number when on a build server
    versionParts[3] = "${System.getenv().BUILD_NUMBER}"
}
version = "${config.minecraft_version}-${versionParts[0]}.${versionParts[1]}.${versionParts[2]}.${versionParts[3]}"
archivesBaseName = "WarpDrive"
config.protocol_version = "${versionParts[0]}.${versionParts[1]}"

// Enforce Java version explicitly so eclipse task generates correctly.
sourceCompatibility = compileJava.sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = compileJava.targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: "${config.mappings_channel}", version: "${config.mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // property 'fml.earlyprogresswindow', 'false'
            
            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
            
            args "-Xmx2048m", "-Xms1024m", "-ea", "-mixin.config=mixins.warpdrive.json"
            
            mods {
                warpdrive {
                    source sourceSets.main
                }
            }
        }
        
        server {
            workingDirectory project.file('run')
            
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            
            // property 'fml.earlyprogresswindow', 'false'
            
            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'
            
            // args "-Xmx2048m", "-Xms1024m", "-ea", "-mixin.config=mixins.warpdrive.json"
            
            mods {
                warpdrive {
                    source sourceSets.main
                }
            }
        }
        
        data {
            workingDirectory project.file('run')
            
            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            
            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            
            args '--mod', 'warpdrive', '--all', '--output', file('src/generated/resources/'),  '--existing', file('src/main/resources/')
            
            mods {
                warpdrive {
                    source sourceSets.main
                }
            }
        }
    }
}
/*
mixin {
    add sourceSets.main, "mixins.warpdrive.refmap.json"
}
*/
sourceSets.main {
    ext.refMap = 'mixins.warpdrive.refmap.json'
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

curseforge {
    // get token from gradle.properties (development space) or default to private environment variable (Travis CI & such)
    if (project.hasProperty('token_curseforge')) {
        apiKey = "${token_curseforge}"
    } else {
        apiKey = System.getenv('token_curseforge')
    }
}

repositories {
    mavenCentral()
    maven { // JEI & Tinkers
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven { // JEI fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven { // CCC/NEI (for WAILA)
        name 'CB Repo'
        url "http://chickenbones.net/maven/"
    }
    maven { // WAILA
        name "ProfMobius Maven FS"
        url "http://mobiusstrip.eu/maven"
    }
    maven { // OpenComputers
        name "OpenComputers"
        url "http://maven.cil.li/"
    }
    maven { // TOP
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
    maven { // CraftTweaker (aka MineTweaker3), Immersive Engineering, Patchouli
        name 'jared maven'
        url "http://blamejared.com/maven"
    }
    maven { // MCMultiPart
        name 'amadornes maven'
        url "http://maven.amadornes.com/"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
    maven {
        name = "EngineHub maven"
        url = "https://maven.enginehub.org/repo/"
    }
//    maven {
//        name = "dmod's BuildBroken maven"
//        url = "http://api.dmodoomsirius.me"
//    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        // other projects seems to replicated here, so we keep it at the end for now
        name = "SquidDev CC Tweaked"
        url = "https://squiddev.cc/maven/"
    }
    ivy {
        name "GalacticraftCore"
        url "https://micdoodle8.com/new-builds/"
        layout 'pattern', {
            artifact "[organization]/${config.Galacticraft_build}/[module]-[revision].jar"
        }
        metadataSources {
            artifact()
        }
    }
//    mavenLocal()
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${config.minecraft_version}-${config.forge_version}"
    
    annotationProcessor "org.spongepowered:mixin:${config.mixin_version}:processor"
    
    // You may put jars on which you depend on in ./libs or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
    
    // Real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env
    
    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'
	
    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'
	
    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    
    // take every jar files from the libs folder
    compile fileTree(dir: 'libs', include: ['*.jar'])
    
    // Using deobfCompile will include in run environment
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: "${config.slf4j_version}"
    implementation fg.deobf("com.sk89q.worldedit:worldedit-core:${config.WorldEdit_version}")
    implementation fg.deobf("com.sk89q.worldedit.worldedit-libs:ap:${config.WorldEdit_version}")
    implementation fg.deobf("com.sk89q.worldedit.worldedit-libs:cli:${config.WorldEdit_version}")
    implementation fg.deobf("com.sk89q.worldedit.worldedit-libs:core:${config.WorldEdit_version}")
    implementation fg.deobf("com.sk89q.worldedit.worldedit-libs:forge:${config.WorldEdit_version}")
    implementation fg.deobf("com.sk89q.worldedit:worldedit-forge-mc1.15.2:${config.WorldEdit_version}")
    compileOnly fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${config.ImmersiveEngineering_version}")
    implementation fg.deobf("org.squiddev:cc-tweaked-${config.minecraft_version}:${config.CCTweaked_version}")
    compileOnly fg.deobf("GC-1.12-dev:GalacticraftCore-Dev:${config.Galacticraft_version}.${config.Galacticraft_build}")
    // compileOnly fg.deobf("com.builtbroken.icbm-classic:ICBM-classic:${config.ICBMclassic_version}")
    compileOnly fg.deobf(curse.resolve("icbm-classic", "${config.ICBMclassic_fileid}"))
    // compileOnly fg.deobf("li.cil.oc:OpenComputers:${config.OpenComputers_version}")
    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${config.Patchouli_version}")
    compileOnly fg.deobf(curse.resolve("matteroverdrive", "${config.MatterOverdrive_fileid}")) // "${config.MatterOverdrive_version}"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    
    // skip source assets
    exclude '**/*.pdn'
    exclude '**/*.psd'
    
    // replace stuff in mods.toml, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        
        // replace version strings
        expand 'version':project.version,
               'mod_version':config.mod_version,
               'minecraft_version':config.minecraft_version,
               'protocol_version':config.protocol_verison
    }
    
    // copy everything else, that's not the mods.toml
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

// build the storage space for each computer scripts
task copyShipControllerCommons1(type: Copy) {
    from 'src/main/resources/data/warpdrive/lua.computercraft/shipcontroller'
    into('build/resources/main/assets/warpdrive/lua.computercraft/shipcore')
}
task copyShipControllerCommons2(type: Copy) {
    from 'src/main/resources/data/warpdrive/lua.opencomputers/shipcontroller'
    into('build/resources/main/assets/warpdrive/lua.opencomputers/shipcore')
}

task copyOpenComputersCommons1(type: Copy) {
    from 'src/main/resources/data/warpdrive/lua.opencomputers/common'
    into('build/resources/main/assets/warpdrive/lua.opencomputers/accelerator')
}

task copyOpenComputersCommons2(type: Copy) {
    from 'src/main/resources/data/warpdrive/lua.opencomputers/common'
    into('build/resources/main/assets/warpdrive/lua.opencomputers/enanreactorcore')
}

task copyOpenComputersCommons3(type: Copy) {
    from 'src/main/resources/data/warpdrive/lua.opencomputers/common'
    into('build/resources/main/assets/warpdrive/lua.opencomputers/shipcontroller')
}

task copyOpenComputersCommons4(type: Copy) {
    from 'src/main/resources/data/warpdrive/lua.opencomputers/common'
    into('build/resources/main/assets/warpdrive/lua.opencomputers/shipcore')
}

task copyOpenComputersCommons5(type: Copy) {
    from 'src/main/resources/data/warpdrive/lua.opencomputers/common'
    into('build/resources/main/assets/warpdrive/lua.opencomputers/transportercore')
}

task copyOpenComputersCommons6(type: Copy) {
    from 'src/main/resources/data/warpdrive/lua.opencomputers/common'
    into('build/resources/main/assets/warpdrive/lua.opencomputers/weaponcontroller')
}

jar {
    dependsOn copyShipControllerCommons1, copyShipControllerCommons2
    dependsOn copyOpenComputersCommons1, copyOpenComputersCommons2, copyOpenComputersCommons3, copyOpenComputersCommons4, copyOpenComputersCommons5, copyOpenComputersCommons6
    
    manifest {
        attributes([
            "Specification-Title"  : "${archivesBaseName}",
            "Specification-Vendor" : "LemADEC",
            "Specification-Version": "1",
            "Implementation-Title"  : project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" : "LemADEC",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'MixinConfigs': 'mixins.warpdrive.json',
            "FMLAT": "warpdrive_at.cfg",
            "FMLCorePlugin": "cr0s.warpdrive.core.FMLLoadingPlugin",
            "FMLCorePluginContainsFMLMod": "true"
        ])
    }
    classifier = ''
    destinationDir = file 'output'
}

task signJar(type: SignJar, dependsOn: jar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }
    
    if (project.hasProperty('keyStore')) { // This needs to be a path to the keystore file
        keyStore = project.keyStore
        alias = project.alias
        storePass = project.storePass
        keyPass = project.keyPass
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}

build.dependsOn signJar

task apiJar(type: Jar) {
    from(sourceSets.main.allJava)
    from(sourceSets.main.output)
    include 'cr0s/warpdrive/api/**'

    classifier = 'api'
    destinationDir = file 'output'
}

artifacts {
    archives apiJar
}

task incrementMinorVersion {
    doFirst {
        def versionStep = '0.0.1.0'.split(/\./).collect { it.toInteger() }
        def indexedVersionList = config.mod_version.split(/\./).toList().withIndex()
        def updatedVersionList = indexedVersionList.collect{num, index -> num.toInteger() + versionStep[index]}
        def updatedVersion = updatedVersionList.join(".")
        String result = configFile.getText().replaceFirst("mod_version=$config.mod_version", "mod_version=$updatedVersion")
        configFile.setText(result)
        // note: the updated/saved version applies to the next build
    }
}

task incrementBuildNumber {
    doFirst {
        def versionStep = '0.0.0.1'.split(/\./).collect { it.toInteger() }
        def indexedVersionList = config.mod_version.split(/\./).toList().withIndex()
        def updatedVersionList = indexedVersionList.collect{num, index -> num.toInteger() + versionStep[index]}
        def updatedVersion = updatedVersionList.join(".")
        String result = configFile.getText().replaceFirst("mod_version=$config.mod_version", "mod_version=$updatedVersion")
        configFile.setText(result)
        // note: the updated/saved version applies to the next build
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

defaultTasks 'clean', 'runData', 'build', 'incrementMinorVersion', 'incrementBuildNumber', 'upload'